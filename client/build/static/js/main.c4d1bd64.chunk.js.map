{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","pages/JobPostForm.js","components/SearchForm.js","utils/queries.js","images/homepage_6.jpg","components/LandingPage.js","components/SearchResults.js","pages/ApplicationForm.js","pages/JobPage.js","pages/Dashboard.js","App.js","index.js"],"names":["ADD_USER","gql","LOGIN_USER","POST_JOB","APPLY_JOB","UPDATE_JOB","REMOVE_JOB","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","JSON","parse","role","userData","setItem","stringify","user","window","location","assign","removeItem","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","handleInputChange","error","data","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","variables","Auth","login","console","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","className","type","onChange","Group","Label","htmlFor","Control","placeholder","required","Feedback","Button","disabled","style","background","LoginForm","AppNavbar","showModal","setShowModal","Menu","pointing","Item","position","color","fontSize","as","Link","to","loggedIn","isEmployer","onClick","logout","Modal","size","onHide","Tab","Container","defaultActiveKey","Header","closeButton","Title","id","Nav","eventKey","Body","Content","Pane","handleModalClose","JobPostForm","companyName","title","openPositions","description","minSalary","maxSalary","skillSet","workExperience","jobFormData","setJobFormData","addJobPost","input","parseInt","block","Grid","Row","Column","width","rows","SearchForm","props","GET_JOBPOSTINGS","GET_JOB_ID","GET_JOBS_POSTED_BY_USER","GET_JOBS_APPLIED_BY_USER","LandingPage","search","setSearch","useEffect","Image","src","image","fluid","e","SearchResults","keyword","useParams","useQuery","loading","jobs","jobPostings","margin","Card","map","job","Meta","datePosted","Description","extra","animated","primary","_id","visible","hidden","Icon","ApplicationForm","contactInfo","notes","joiningDate","appFormData","setAppFormData","addApplication","jobId","JobPage","jobPosting","recruiter","applications","getUserInfo","app","applicant","Dashboard","editMode","setEditMode","setopenPositions","QUERY","getJobsPostedByUser","getJobsAppliedByUser","updateJob","errorUpdateJob","updatedJob","removeJob","errorRemoveJob","removedJob","updateJobOpening","removeJobPost","length","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","Navbar","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4d1bd64.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\n\nexport const ADD_USER = gql`\nmutation addUser($username: String!, $email: String!, $password: String!, $role: String!) {\n    addUser(username: $username, email: $email, password: $password,, role: $role) {\n        token\n        user {\n            _id\n            username\n            role\n            email\n        }\n    }\n}\n`;\n\nexport const LOGIN_USER = gql`\nmutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password){\n        token\n        user {\n            _id\n            username\n            role\n            email\n        }\n    }\n}\n`;\n\nexport const POST_JOB = gql`\nmutation addJobPost($input: jobInput) {\n    addJobPost(input: $input) {\n        _id\n        companyName\n        title\n        openPositions\n        description\n        datePosted\n        minSalary\n        maxSalary\n        skillSet\n        workExperience\n    }\n}\n`;\n\nexport const APPLY_JOB = gql`\nmutation addApplication($jobId: ID!, $contactInfo: String!, $notes: String, $joiningDate: String) {\n    addApplication(jobId: $jobId, contactInfo: $contactInfo, notes: $notes, joiningDate: $joiningDate) {\n        _id\n        contactInfo\n        notes\n        joiningDate\n    }\n}\n`;\n\nexport const UPDATE_JOB = gql`\nmutation updateJob($jobId: ID!, $openPositions: Int!) {\n    editJobPost(id: $jobId, openPositions: $openPositions) {\n        _id\n        companyName\n        title\n        openPositions\n        description\n        datePosted\n        minSalary\n        maxSalary\n        skillSet\n        workExperience\n    }\n}\n`;\n\nexport const REMOVE_JOB = gql`\nmutation removeJobPost($jobId: ID!) {\n    removeJobPost(jobId: $jobId) {\n        _id\n        companyName\n        title\n        openPositions\n        description\n        datePosted\n        minSalary\n        maxSalary\n        skillSet\n        workExperience\n    }\n}\n`;\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  getUserInfo() {\n    // Retrieves the user info from localStorage\n    return JSON.parse(localStorage.getItem('userinfo'));\n  }\n\n  isEmployer() {\n    // Retrieves the user info from localStorage\n    return JSON.parse(localStorage.getItem('userinfo')).role === 'employer';\n  }\n\n  login(userData) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', userData.token);\n    localStorage.setItem('userinfo', JSON.stringify(userData.user));\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\nimport { Form, Button, Alert,ButtonGroup } from 'react-bootstrap';\n\n// import { createUser } from '../utils/API';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '', role:'' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      // Using the mutation ADD_USER to sign up new users\n      // The form data is passed to the gql\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.addUser);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n        <div className=\"ui form\">\n          <div className=\"inline fields\">\n            <div className=\"field\">\n              <div className=\"ui radio checkbox\">\n                <input type=\"radio\" name='role' onChange={handleInputChange} value=\"employer\"></input>\n                <label>I am an Employer</label>\n              </div>\n            </div>\n            <div className=\"field\">\n              <div className=\"ui radio checkbox\">\n                <input type=\"radio\" name='role' onChange={handleInputChange} value=\"seeker\"></input>\n                <label>I am Job Seeker</label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          style={{background: '#385E72'}}\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { Button, Checkbox, Form } from 'semantic-ui-react'\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n\n      const { data } = await login({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          style={{background: '#385E72'}}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport { Button, Header, Icon } from 'semantic-ui-react'\nimport { Input, Menu, Segment } from 'semantic-ui-react'\n// import { Tab } from 'semantic-ui-react'\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Menu pointing style={{ background: '#385E72' }}>\n        <Menu.Item position='right' style={{ color: 'white', fontSize: '1.2rem' }}\n          name='Explore Jobs'\n          as={Link} to='/'\n        />\n\n        {Auth.loggedIn() ? (\n          <>\n            <Menu.Item style={{ color: 'white', fontSize: '1.2rem' }}\n              name='Dashboard'\n              as={Link} to='/dashboard'\n            />\n            {Auth.isEmployer() ? (\n              <Menu.Item style={{ color: 'white', fontSize: '1.2rem' }}\n                name='Post a Job'\n                as={Link} to='/postJob'\n              />) : null}\n            <Menu.Item style={{ color: 'white', fontSize: '1.2rem' }}\n              name='Logout'\n              onClick={Auth.logout}\n            />\n          </>\n        ) : (\n          <Menu.Item style={{ color: 'white', fontSize: '1.2rem' }}\n            name=\"Login or Sign Up\"\n            onClick={() => setShowModal(true)}\n          />\n        )}\n      </Menu>\n\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { Container, Header, Grid } from 'semantic-ui-react';\n\nimport { useMutation } from '@apollo/client';\nimport { POST_JOB } from '../utils/mutations';\n\nimport '../styles/CustomStyle.css';\n\nimport Auth from '../utils/auth';\n\nconst JobPostForm = () => {\n\n  const [jobFormData, setJobFormData] = useState({ companyName: '', title: '', openPositions: '', description: '', minSalary: '', maxSalary: '', skillSet: '', workExperience: '' });\n\n  const [addJobPost, { error, data }] = useMutation(POST_JOB);\n\n  // Capture values of fields when user adds or changes an input\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setJobFormData({ ...jobFormData, [name]: value });\n  };\n\n  // On form submission use mutation to add a new job post\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addJobPost({\n        variables: {\n          input: { ...jobFormData, [\"openPositions\"]: parseInt(jobFormData.openPositions), [\"minSalary\"]: parseInt(jobFormData.minSalary), [\"maxSalary\"]: parseInt(jobFormData.maxSalary) },\n        }\n      });\n      window.location.assign('/dashboard');\n    } catch (err) {\n      console.error(err);\n    }\n\n    setJobFormData({\n      companyName: '', title: '', openPositions: '', description: '', minSalary: '', maxSalary: '', skillSet: '', workExperience: ''\n    });\n  };\n  return (\n    <>\n      <Container className='customContainer'>\n        <Header as='h3' block style={{ background: '#B7CFDC', color: '#385E72' }}>Please provide job details: </Header>\n        <Form noValidate onSubmit={handleFormSubmit}>\n          <Grid className='customGrid'>\n            <Grid.Row className='customRow'>\n              <Grid.Column width={8}>\n                <Form.Group>\n                  <Form.Label htmlFor='companyName'>Company Name: </Form.Label>\n                  <Form.Control\n                    type='text'\n                    name='companyName'\n                    onChange={handleInputChange}\n                    value={jobFormData.companyName}\n                    required\n                  />\n                </Form.Group>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Form.Group>\n                  <Form.Label htmlFor='title'>Title: </Form.Label>\n                  <Form.Control\n                    type='text'\n                    name='title'\n                    onChange={handleInputChange}\n                    value={jobFormData.title}\n                    required\n                  />\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row className='customRow'>\n              <Grid.Column width={8}>\n                <Form.Group>\n                  <Form.Label htmlFor='openPositions'>Openings: </Form.Label>\n                  <Form.Control\n                    type='text'\n                    name='openPositions'\n                    onChange={handleInputChange}\n                    value={jobFormData.openPositions}\n                  />\n                </Form.Group>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Form.Group>\n                  <Form.Label htmlFor='workExp'>Work Experience: </Form.Label>\n                  <Form.Control\n                    type='text'\n                    name='workExperience'\n                    onChange={handleInputChange}\n                    value={jobFormData.workExperience}\n                  />\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row className='customRow'>\n              <Grid.Column width={16}>\n                <Form.Group>\n                  <Form.Label htmlFor='description'>Description: </Form.Label>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={5}\n                    name='description'\n                    onChange={handleInputChange}\n                    value={jobFormData.description}\n                    required\n                  />\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row className='customRow'>\n              <Grid.Column width={8}>\n                <Form.Group>\n                  <Form.Label htmlFor='minSalary'>Minimum Salary: </Form.Label>\n                  <Form.Control\n                    type='text'\n                    name='minSalary'\n                    onChange={handleInputChange}\n                    value={jobFormData.minSalary}\n                  />\n                </Form.Group>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Form.Group>\n                  <Form.Label htmlFor='maxSalary'>Maximum Salary: </Form.Label>\n                  <Form.Control\n                    type='text'\n                    name='maxSalary'\n                    onChange={handleInputChange}\n                    value={jobFormData.maxSalary}\n                  />\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row className='customRow'>\n              <Grid.Column width={16}>\n                <Form.Group>\n                  <Form.Label htmlFor='skillset'>Skill Set: </Form.Label>\n                  <Form.Control\n                    type='text'\n                    name='skillSet'\n                    onChange={handleInputChange}\n                    value={jobFormData.skillSet}\n                  />\n                </Form.Group>\n              </Grid.Column>\n            </Grid.Row>\n\n          </Grid>\n          <Button\n            type='submit'\n            variant='success'>\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    </>\n  );\n};\n\nexport default JobPostForm;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon } from 'semantic-ui-react'\nimport '../styles/CustomStyle.css';\n\nfunction SearchForm(props) {\n  return (\n    <div className=\"custom-content\">\n      <Header as='h1'>Jobverse</Header>\n      <Header as='h2'>Find your next job here!</Header>\n    <form>\n      <div className=\"search-form\">\n        <input\n          onChange={props.handleInputChange}\n          value={props.value}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-field\"\n          placeholder=\"Job title or keyword\"\n          id=\"search\"\n        />\n\n        <Link\n              className=\"btn btn-primary btn-block btn-squared custombtn\"\n              to={`/searchResults/${props.value}`}\n            >\n              Search Jobs\n            </Link>\n      </div>\n    </form>\n    </div>\n  );\n}\n\nexport default SearchForm;","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`\nquery me {\n    me {\n        _id\n        username\n        email\n        role\n    }\n}\n`;\n\nexport const GET_JOBPOSTINGS = gql`\nquery jobPostings ($keyword: String!){\n    jobPostings(keyword: $keyword) {\n        _id\n        companyName\n        title\n        openPositions\n        description\n        datePosted\n        minSalary\n        maxSalary\n        skillSet\n        workExperience\n    }\n\n\n}\n`;\n\nexport const GET_JOB_ID = gql`\nquery jobPosting ($jobId: ID!) {\n    jobPosting (jobId: $jobId) {\n        _id\n        companyName\n        title\n        openPositions\n        description\n        datePosted\n        minSalary\n        maxSalary\n        skillSet\n        workExperience\n        recruiter{\n            _id\n            username\n            email\n        }\n        applications{\n            _id\n            contactInfo\n            notes\n            joiningDate\n            applicant{\n                _id\n                username\n                email\n            }\n        }\n    }\n\n\n}\n`;\n\nexport const GET_JOBS_POSTED_BY_USER = gql`\nquery getJobsPostedByUser {\n    getJobsPostedByUser  {\n        _id\n        companyName\n        title\n        openPositions\n        description\n        datePosted\n        minSalary\n        maxSalary\n        skillSet\n        workExperience\n        recruiter{\n            username\n            email\n        }\n        applications{\n            _id\n            contactInfo\n            notes\n            joiningDate\n            applicant{\n                _id\n                username\n                email\n            }\n        }\n    }\n\n\n}\n`;\n\nexport const GET_JOBS_APPLIED_BY_USER = gql`\nquery getJobsAppliedByUser {\n    getJobsAppliedByUser {\n        _id\n        companyName\n        title\n        openPositions\n        description\n        datePosted\n        minSalary\n        maxSalary\n        skillSet\n        workExperience\n        recruiter{\n            username\n            email\n        }\n        applications{\n            _id\n            contactInfo\n            notes\n            joiningDate\n            applicant{\n                _id\n                username\n                email\n            }\n        }\n    }\n\n\n}\n`;\n","export default __webpack_public_path__ + \"static/media/homepage_6.ab164a68.jpg\";","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport SearchForm from './SearchForm';\n\nimport { GET_JOBPOSTINGS } from '../utils/queries';\nimport '../styles/CustomStyle.css';\nimport { Image } from 'semantic-ui-react'\n\nimport image from '../images/homepage_6.jpg'\n\nconst LandingPage = () => {\n  \n\n    const [result, setResult] = useState({});\n    const [search, setSearch] = useState('');\n\n    const searchJobs = () => {\n      // const { loading, data } = useQuery(GET_JOBPOSTINGS);\n      // const jobs = data?.jobs || [];\n    \n    }\n    \n     useEffect(() => {       \n        searchJobs('');\n     }, []);\n\n    const handleInputChange = (e) => setSearch(e.target.value);\n  \n    const handleFormSubmit = (e) => {\n      e.preventDefault();\n      searchJobs(search);\n    };\n\n    \n    return (\n        <div> \n        <Image src={image} fluid/>\n          <div className='overlay'></div>\n          <SearchForm\n            value={search}\n            handleInputChange={handleInputChange}\n            handleFormSubmit={handleFormSubmit}\n          />\n        </div>\n    );\n}\n\nexport default LandingPage;","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport { GET_JOBPOSTINGS } from '../utils/queries';\nimport { Link } from 'react-router-dom'\nimport { SearchForm } from '../components/SearchForm';\nimport Auth from '../utils/auth';\n\nimport { Button, Card, Icon } from 'semantic-ui-react';\nimport { Container, Header } from 'semantic-ui-react';\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\n\nfunction SearchResults() {\n\n  const { keyword } = useParams();\n\n  const { loading, data } = useQuery(GET_JOBPOSTINGS, {\n    variables: { keyword: keyword },\n  });\n\n  const jobs = data?.jobPostings || [];\n\n  if (loading) {\n    return <Header as='h1'> LOADING...</Header>;\n    \n  }\n\n  return (\n    <Container style={{ margin: 20 }}>\n      <Header as='h3' block style={{ background: '#B7CFDC', color: '#385E72'}}>\n        Results\n      </Header>\n      <Card.Group>\n        {jobs &&\n          jobs.map((job) => (\n            <Card className='customCard' key={job._id} style={{ width: '32%'}} color='blue'>\n              <Card.Content>\n                <Card.Header>\n                  <h3><strong>{job.title}</strong></h3>\n                </Card.Header>\n                <Card.Meta>\n                  Posted on: {job.datePosted}\n                </Card.Meta>\n                <Card.Description style={{fontSize: '1rem'}}>\n                  <br></br>\n                  <p><strong>Company: </strong> {job.companyName}</p>\n                  <p><strong>Salary: </strong>${job.minSalary} to ${job.maxSalary}</p>\n                  <p><strong>Description: </strong>{job.description}</p>\n                  <p><strong>Open Positions: </strong>{job.openPositions}</p>\n                </Card.Description>\n              </Card.Content>\n              {(Auth.loggedIn())?(\n              <Card.Content extra>\n                {/* basic color='#B5B2B0' */}\n                <Button animated style={{ background: '#385E72', color: 'white'}} primary as={Link} to={`/JobPage/${job._id}`}>\n                  <Button.Content visible>Details</Button.Content>\n                  <Button.Content hidden>\n                    <Icon name='arrow right' />\n                  </Button.Content>\n                </Button>\n              </Card.Content>\n              ):null}\n            </Card>\n          ))}\n      </Card.Group>\n    </Container>\n  )\n}\n\nexport default SearchResults;","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { APPLY_JOB } from '../utils/mutations';\n\nconst ApplicationForm = (props) => {\n\n    const [appFormData, setAppFormData] = useState({ contactInfo: '', notes: '', joiningDate: '' });\n\n    const [addApplication, { error, data }] = useMutation(APPLY_JOB);\n\n    // Capture values of fields when user adds or changes an input\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setAppFormData({ ...appFormData, [name]: value });\n    };\n\n    // On form submission use mutation to apply for the selected job\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        try {\n            const { data } = await addApplication({\n                variables: { 'jobId': props.jobId, ...appFormData },\n            });\n            window.location.assign('/dashboard');\n        } catch (err) {\n            console.error(err);\n        }\n\n        setAppFormData({\n            contactInfo: '', notes: '', joiningDate: ''\n        });\n    };\n    return (\n        <>\n            <Form noValidate onSubmit={handleFormSubmit}>\n                <Form.Group>\n                    <Form.Label htmlFor='contactInfo'>Email</Form.Label>\n                    <Form.Control\n                        type='text'\n                        name='contactInfo'\n                        onChange={handleInputChange}\n                        value={appFormData.contactInfo}\n                        required\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='notes'>Additional notes</Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={5}\n                        name='notes'\n                        onChange={handleInputChange}\n                        value={appFormData.notes}\n                        required\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='joiningDate'>Tentative Joining Date</Form.Label>\n                    <Form.Control\n                        type='date'\n                        name='joiningDate'\n                        onChange={handleInputChange}\n                        value={appFormData.joiningDate}\n                        required\n                    />\n                </Form.Group>\n                <Button\n                    type='submit'\n                    variant='success'>\n                    Submit\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default ApplicationForm;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport { GET_JOB_ID } from '../utils/queries';\nimport { Link } from 'react-router-dom';\nimport ApplicationForm from './ApplicationForm';\nimport Auth from '../utils/auth';\n\nconst JobPage = () => {\n\n  const isEmployer = Auth.isEmployer();\n\n  const [showModal, setShowModal] = useState(false);\n    const { jobId } = useParams();\n    const [jobID, setJobId] = useState(jobId);\n\n    const { loading, data } = useQuery(GET_JOB_ID, {\n      variables: { jobId: jobId }, \n    });\n  \n    const job = data?.jobPosting || {};\n\n    if (loading) {\n      return <h2>LOADING...</h2>;\n    }\n\n    return (\n        <div>\n            <div>\n              <h5>{job.title}</h5>\n              <p>Company: {job.companyName}</p>\n              <p>Open Positions: {job.openPositions}</p>\n              <p>Description: {job.description}</p>\n              <p>Skill Set: {job.skillSet}</p>\n              <p>Experience Required: {job.workExperience}</p>\n              <p>Salary: ${job.minSalary} to ${job.maxSalary}</p>\n              <p>Contact: {job.recruiter.email}</p>\n              {(job.applications && isEmployer && job.recruiter._id == Auth.getUserInfo()._id)?(\n                job.applications.map((app) => (\n                    <div key={app._id} className=\"card mb-5\">\n                        <div className=\"card-header\">\n                        <h5><strong>{app.applicant.username}</strong></h5>\n                        </div>\n                      <div className=\"card-body bg-light p-2\">\n                        <p>Contact Info: {app.contactInfo}</p>\n                        <p>Notes: {app.notes}</p>\n                      </div>\n                      <div className=\"card-footer\">\n                        <span style={{ fontSize: '1rem' }}>\n                        Can join by :{app.joiningDate}\n                        </span>\n                      </div>\n                    </div>\n                  ))\n              ):(<span></span>)}\n            </div>\n            <div className=\"card-footer\">\n              <span style={{ fontSize: '1rem' }}>\n                Posted on: {job.datePosted}\n              </span>\n            </div>\n\n            <div>\n              {(!isEmployer)?(<Link\n                  className=\"btn btn-primary btn-block btn-squared\"\n                  to={``}\n                  onClick={() => setShowModal(true)}\n                >\n                  Apply\n            </Link>):(<span></span>)}\n            \n            </div>\n          {/* </div> */}\n          <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='application-modal'>\n        {/* tab container to do either signup or login component */}\n          <Modal.Header closeButton>\n            <Modal.Title id='application-modal'>\n            <h5>Please provide following details: </h5>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n                <ApplicationForm handleModalClose={() => setShowModal(false)} jobId= { jobId } />\n            </Tab.Content>\n          </Modal.Body>\n      </Modal>\n    </div>\n    \n    )\n}\n\nexport default JobPage;","import React,{ useState }  from 'react';\nimport { useQuery,useMutation } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport { GET_JOBS_POSTED_BY_USER, GET_JOBS_APPLIED_BY_USER } from '../utils/queries';\nimport { UPDATE_JOB, REMOVE_JOB } from '../utils/mutations';\nimport { Link } from 'react-router-dom'\nimport { SearchForm } from '../components/SearchForm';\nimport Auth from '../utils/auth';\n\nfunction Dashboard() {\n  const [editMode, setEditMode] = useState(false);\n  const [openPositions, setopenPositions] = useState('');\n  const [actJobId, setactJobId] = useState('');\n\n    let isEmployer = Auth.isEmployer();\n      let QUERY = isEmployer ? GET_JOBS_POSTED_BY_USER:GET_JOBS_APPLIED_BY_USER;\n\n      const { loading, data } = useQuery(QUERY);\n      const jobs = isEmployer? data?.getJobsPostedByUser : data?.getJobsAppliedByUser || [];\n\n    const [updateJob, { errorUpdateJob, updatedJob }] = useMutation(UPDATE_JOB);\n    const [removeJob, { errorRemoveJob, removedJob }] = useMutation(REMOVE_JOB);\n    \n    const handleInputChange = (event) => {\n      const { name, value } = event.target;\n      setopenPositions(value)\n  };\n      const updateJobOpening = async (jobId) => {\n\n        try {\n            const { data } = await updateJob({\n                variables: { 'jobId': jobId, 'openPositions': parseInt(openPositions) },\n            });\n            window.location.assign('/dashboard');\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const removeJobPost = async (jobId) => {\n\n      try {\n          const { data } = await removeJob({\n              variables: { 'jobId': jobId },\n          });\n          window.location.assign('/dashboard');\n      } catch (err) {\n          console.error(err);\n      }\n  };\n\n      if (loading) {\n        return <h2>LOADING...</h2>;\n      }\n\n\n    return (\n\n  <div className='Results'>\n          <p className=\"jobResults\">\n          {isEmployer ? (\n         <strong>Jobs Posted</strong>\n        ) : (\n            <strong>Applied Jobs</strong>\n        )}\n            </p>\n    <div>\n      {jobs &&\n        jobs.map((job) => (\n          <div key={job._id} className=\"card mb-5\">\n                {(isEmployer)?(\n              <div className=\"card-header\">\n                {(editMode)?(\n              <Link\n                  className=\"btn btn-primary btn-block btn-squared\"\n                  to={``}\n                  onClick={() => updateJobOpening(job._id)}\n                >\n                  Update\n            </Link>):(\n            <Link\n                  className=\"btn btn-primary btn-block btn-squared\"\n                  to={``}\n                  onClick={() => setEditMode(true)}\n                >\n                  Update Openings\n            </Link>)}\n            <Link\n                  className=\"btn btn-primary btn-block btn-squared\"\n                  to={``}\n                  onClick={() => removeJobPost(job._id)}\n                >\n                  Delete\n            </Link>\n              </div>):(\n                <div className=\"card-header\"></div>\n              )}\n            <div className=\"card-body bg-light p-2\">\n            <h5><strong>{job.title}</strong></h5>\n              {isEmployer ? (\n         <p>Applications Count: {job.applications.length}</p>\n        ) : (\n         <p></p>\n        )}\n              <p>Company: {job.companyName}</p>\n              <p>Salary: ${job.minSalary} to ${job.maxSalary}</p>\n              <p>{job.description}</p>\n              \n              {editMode ? (\n         <p>Open Positions: <input type=\"number\" name=\"openPositions\" onChange={handleInputChange} /></p>\n        ) : (\n          <p>Open Positions: {job.openPositions}</p>\n        )}\n            </div>\n            <div className=\"card-footer\">\n              <span style={{ fontSize: '1rem' }}>\n                Posted on: {job.datePosted}\n              </span>\n              <Link\n                  className=\"btn btn-primary btn-block btn-squared\"\n                  to={`/JobPage/${job._id}`}\n                >\n                  Details\n            </Link>\n            </div>\n          </div>\n        ))}\n    </div>\n          </div>\n\n    )\n}\n\nexport default Dashboard;","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Navbar from './components/Navbar';\nimport JobPostForm from './pages/JobPostForm';\nimport LandingPage from './components/LandingPage';\nimport SearchResults from './components/SearchResults';\nimport JobPage from './pages/JobPage';\nimport Dashboard from './pages/Dashboard';\n\n\n// The apollo client provides authentication by using the following 'Header' method\n// createHttpLink returns a new instance of ApolloLink\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\n\n// The setContext takes 2 parameters, the GraphQL request and the previous context.\n// In this method evry HTTP request will have a JWT token attached as the  authorization header\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return{\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        \n\n        <Routes>\n        <Route \n            path='/postJob'\n            element={<JobPostForm />}\n          />\n          <Route \n            path='*'\n            element={<LandingPage />}\n          />\n          <Route \n          path=\"/searchResults/:keyword\" \n          element={<SearchResults />} \n        />\n          <Route\n          path=\"/JobPage/:jobId\"\n          element={<JobPage />}\n          />\n          <Route\n          path=\"/dashboard\"\n          element={<Dashboard />}\n          />\n        </Routes>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}